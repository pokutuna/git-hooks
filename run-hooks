#!/bin/sh

# Usage
# - Put your hooks to a directory which name of original hook.
# - Create symlinks to this script in $GIT_DIR/hooks.
#   This script acts as a hook to run executable scripts in the directory according to the name of symlink.
#

# Environment Variables
#
# - RUN_GIT_HOOK_NAME:
#    This environment variable overrides the name of directory which contains hooks to execute.
#    If you also want to use the usual way (put hooks in $GIT_DIR/hooks), set this variable like below.
#        e.g) $GIT_DIR/hooks/pre-commit
#            RUN_GIT_HOOK_NAME=pre-commit path/to/this/script/directory/run-hooks $@
#
# - VERBOSE_GIT_HOOKS:
#    This is a verbose output flag.
#

THIS_SCRIPT_NAME='run-hooks'

COL_NORMAL=$(tput sgr0)
COL_GREEN=$(tput setaf 2)
COL_RED=$(tput setaf 1)

function log_info_run_hooks {
    echo "[${COL_GREEN}${THIS_SCRIPT_NAME}${COL_NORMAL}] ${@}"
}

function log_error_run_hooks {
    echo "[$COL_RED${THIS_SCRIPT_NAME}:err$COL_NORMAL] ${@}" 1>&2
}

function log_verbose_run_hooks {
    [ ! -z $VERBOSE_GIT_HOOKS ] && log_info_run_hooks $@
}

GIT_HOOK_NAME=${RUN_GIT_HOOK_NAME:-$(basename $0)}
log_verbose_run_hooks "GIT_HOOK_NAME: ${GIT_HOOK_NAME}"
if [ $GIT_HOOK_NAME = $THIS_SCRIPT_NAME ]; then
    log_error_run_hooks 'create symlink in $GIT_DIR/hooks OR set $RUN_GIT_HOOK_NAME'
    exit 1
fi

HOOKS_ROOT=$(dirname $(readlink -f $0))
RUN_HOOK_DIR="${HOOKS_ROOT}/${GIT_HOOK_NAME}"
log_verbose_run_hooks "RUN_HOOK_DIR: ${RUN_HOOK_DIR}"
if [ ! -d $RUN_HOOK_DIR ]; then
    log_error_run_hooks "'${RUN_HOOK_DIR}' is not a directory"
    exit 1
fi

# run hook scripts
set -e
for file in $(ls $RUN_HOOK_DIR | sort); do
    hook="${RUN_HOOK_DIR}/${file}"
    if [ -x $hook ]; then
        log_verbose_run_hooks "run: ${file} ${@}"
        $hook "$@"
    fi
done
set +e

exit 0
